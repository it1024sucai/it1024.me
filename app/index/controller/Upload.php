<?php
/**
 * Created by PhpStorm.
 * User: HuWeiBing
 * Date: 2019/10/26
 * Time: 23:21
 */

namespace app\index\controller;


use app\BaseController;
use app\model\Attachments;
use util\Uploader;
use think\Image;

class Upload extends BaseController
{

    public $config;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->config = json_decode(preg_replace("/\/\*[\s\S]+?\*\//", "", file_get_contents("./plugins/ueditor/php/config.json")), true);
        //$this->config['fileAllowFiles'] = config('app.upload_file_ext');
        //$this->config['imageAllowFiles'] = config('app.upload_image_ext');
    }

    /**
     * 上传附件
     * @param string $dir 保存的目录:images,files,videos,voices
     * @param string $from 来源，wangeditor：wangEditor编辑器, ueditor:ueditor编辑器, editormd:editormd编辑器等
     * @param string $module 来自哪个模块* @returnmixed
     */
    public function index()
    {
        $type = input('type');
        $from = input('from');
        // 临时取消执行时间限制
        set_time_limit(0);
        if ($type == '')
            $this->error('没有指定上传目录');
        if ($from == 'ueditor')
            return $this->ueditor();
        return $this->upload();
    }

    /**
     * 添加水印
     * @param string $file 要添加水印的文件路径
     * @param string $watermark_img 水印图片id
     * @param string $watermark_pos 水印位置
     * @param string $watermark_alpha 水印透明度
     */
    private function create_water($file = '', $watermark_img = '', $watermark_pos = '', $watermark_alpha = '')
    {
        $path            = Attachments::getFilePath($watermark_img, 1);
        $thumb_water_pic = realpath(ROOT_PATH . 'public/' . $path);
        if (is_file($thumb_water_pic)) {
            // 读取图片
            $image = Image::open($file);
            // 添加水印
            $watermark_pos   = $watermark_pos == '' ? config('upload_thumb_water_position') : $watermark_pos;
            $watermark_alpha = $watermark_alpha == '' ? config('upload_thumb_water_alpha') : $watermark_alpha;
            $image->water($thumb_water_pic, $watermark_pos, $watermark_alpha);
            // 保存水印图片，覆盖原图
            $image->save($file);
        }
    }

    public function ueditor()
    {
        $action = $_GET['action'];
        switch ($action) {
            case 'config':
                $result = json($this->config);
                break;

            /* 上传图片 */
            case 'uploadimage':
                /* 上传涂鸦 */
            case 'uploadscrawl':
                /* 上传视频 */
            case 'uploadvideo':
                /* 上传文件 */
            case 'uploadfile':
                $result = $this->upload();
                break;

            /* 列出图片 */
            case 'listimage':
                $result = $this->getList();
                break;
            /* 列出文件 */
            case 'listfile':
                $result = $this->getList();
                break;

            /* 抓取远程文件 */
            case 'catchimage':
                $result = $this->scrawl();
                break;

            default:
                $result = json(array('state' => '请求地址出错'));
                break;
        }

        /* 输出结果 */
        if (isset($_GET["callback"])) {
            if (preg_match("/^[\w_]+$/", $_GET["callback"])) {
                echo htmlspecialchars($_GET["callback"]) . '(' . $result . ')';
            } else {
                return json(array('state' => 'callback参数不合法'));
            }
        } else {
            return $result;
        }
    }

    /**
     * 上传附件和上传视频
     * Date: 14-04-09
     * Time: 上午10:17
     */
    public function upload()
    {
        $from = input('from');
        $CONFIG = $this->config;
        /* 上传配置 */
        $base64 = "upload";
        switch (input('action')) {
            case 'uploadimage':
                $config    = array(
                    "pathFormat" => $CONFIG['imagePathFormat'], "maxSize" => $CONFIG['imageMaxSize'],
                    "allowFiles" => $CONFIG['imageAllowFiles']
                );
                $fieldName = $CONFIG['imageFieldName'];
                break;
            case 'uploadscrawl':
                $config    = array(
                    "pathFormat" => $CONFIG['scrawlPathFormat'], "maxSize" => $CONFIG['scrawlMaxSize'],
                    "allowFiles" => $CONFIG['scrawlAllowFiles'], "oriName" => "scrawl.png"
                );
                $fieldName = $CONFIG['scrawlFieldName'];
                $base64    = "base64";
                break;
            case 'uploadvideo':
                $config    = array(
                    "pathFormat" => $CONFIG['videoPathFormat'], "maxSize" => $CONFIG['videoMaxSize'],
                    "allowFiles" => $CONFIG['videoAllowFiles']
                );
                $fieldName = $CONFIG['videoFieldName'];
                break;
            case 'uploadfile':
            default:
                $config    = array(
                    "pathFormat" => $CONFIG['filePathFormat'], "maxSize" => $CONFIG['fileMaxSize'],
                    "allowFiles" => $CONFIG['fileAllowFiles']
                );
                $fieldName = $CONFIG['fileFieldName'];
                break;
        }
        $md5 = request()->file('file')->md5();
        /* 生成上传实例对象并完成上传 */
        $up = new Uploader($fieldName, $config, $base64);

        /**
         * 得到上传文件所对应的各个参数,数组结构
         * array(
         *     "state" => "",          //上传状态，上传成功时必须返回"SUCCESS"
         *     "url" => "",            //返回的地址
         *     "title" => "",          //新文件名
         *     "original" => "",       //原始文件名
         *     "type" => ""            //文件类型
         *     "size" => "",           //文件大小
         * )
         */


        $fileInfo = $up->getFileInfo();

        $data = [
            'name'=> $fileInfo['title'],
            'path'=> $fileInfo['url'],
            'ext'=> $fileInfo['type'],
            'size'=> $fileInfo['size'],
            'md5'=> $md5,
        ];

        if($fileInfo['state'] == 'SUCCESS'){
            if(input('thumb')){
                list($width, $height) = explode('|',input('thumb'));
                $path = substr($fileInfo['url'],0,strrpos($fileInfo['url'],'/')+1);
                $ext = $fileInfo['type'];
                $name = str_replace($ext,'',$fileInfo['title']);
                $thumb = $path.$name.'_thumb'.$ext;
                $image = \think\Image::open('.'.$fileInfo['url']);
                // 按照原图的比例生成一个最大为150*150的缩略图并保存为thumb.png
                $image->thumb($width,$height,7)->save('.'.$thumb);
                $data['thumb'] = $thumb;
            }

            $id = Attachments::insertGetId($data);

            switch ($from) {
                case 'ueditor':
                    return json($fileInfo);
                    break;
                default:
                    return json([
                                    'code' => 1, 'info' => '上传成功','id'=>$id, 'class' => 'success', 'path' => $fileInfo['url']
                                ]);
            }

        }else{
            return json([
                            'code' => 0, 'info' => '上传失败', 'class' => 'error'
                        ]);
        }
        return json($fileInfo);
    }

    /**
     * 抓取远程图片
     * User: Jinqn
     * Date: 14-04-14
     * Time: 下午19:18
     */
    public function scrawl()
    {
        $CONFIG = $this->config;

        /* 上传配置 */
        $config    = array(
            "pathFormat" => $CONFIG['catcherPathFormat'], "maxSize" => $CONFIG['catcherMaxSize'],
            "allowFiles" => $CONFIG['catcherAllowFiles'], "oriName" => "remote.png"
        );
        $fieldName = $CONFIG['catcherFieldName'];

        /* 抓取远程图片 */
        $list = array();
        if (isset($_POST[$fieldName])) {
            $source = $_POST[$fieldName];
        } else {
            $source = $_GET[$fieldName];
        }
        foreach ($source as $imgUrl) {
            $item = new Uploader($imgUrl, $config, "remote");
            $info = $item->getFileInfo();
            array_push($list, array(
                "state"  => $info["state"], "url" => $info["url"], "size" => $info["size"],
                "title"  => htmlspecialchars($info["title"]), "original" => htmlspecialchars($info["original"]),
                "source" => htmlspecialchars($imgUrl)
            ));
        }

        /* 返回抓取数据 */
        return json_encode(array(
                               'state' => count($list) ? 'SUCCESS' : 'ERROR', 'list' => $list
                           ));
    }


    /**
     * 获取已上传的文件列表
     * User: Jinqn
     * Date: 14-04-09
     * Time: 上午10:17
     */

    public function getList()
    {
        $CONFIG = $this->config;
        /* 判断类型 */
        switch ($_GET['action']) {
            /* 列出文件 */
            case 'listfile':
                $allowFiles = $CONFIG['fileManagerAllowFiles'];
                $listSize   = $CONFIG['fileManagerListSize'];
                $path       = $CONFIG['fileManagerListPath'];
                break;
            /* 列出图片 */
            case 'listimage':
            default:
                $allowFiles = $CONFIG['imageManagerAllowFiles'];
                $listSize   = $CONFIG['imageManagerListSize'];
                $path       = $CONFIG['imageManagerListPath'];
        }
        $allowFiles = substr(str_replace(".", "|", join("", $allowFiles)), 1);

        /* 获取参数 */
        $size  = isset($_GET['size']) ? htmlspecialchars($_GET['size']) : $listSize;
        $start = isset($_GET['start']) ? htmlspecialchars($_GET['start']) : 0;
        $end   = $start + $size;

        /* 获取文件列表 */
        $path  = $_SERVER['DOCUMENT_ROOT'] . (substr($path, 0, 1) == "/" ? "" : "/") . $path;
        $files = getfiles($path, $allowFiles);
        if (!count($files)) {
            return json_encode(array(
                                   "state" => "no match file", "list" => array(), "start" => $start,
                                   "total" => count($files)
                               ));
        }

        /* 获取指定范围的列表 */
        $len = count($files);
        for ($i = min($end, $len) - 1, $list = array(); $i < $len && $i >= 0 && $i >= $start; $i--) {
            $list[] = $files[$i];
        }
        //倒序
        //for ($i = $end, $list = array(); $i < $len && $i < $end; $i++){
        //    $list[] = $files[$i];
        //}

        /* 返回数据 */
        $result = json_encode(array(
                                  "state" => "SUCCESS", "list" => $list, "start" => $start, "total" => count($files)
                              ));

        return $result;
    }


    /**
     * 检查附件是否存在
     * @param string $md5 文件md5* @return\think\response\Json
     */
    public function check($md5 = '')
    {
        $md5 == '' && $this->error('参数错误');

        // 判断附件是否已存在
        if ($file_exists = Attachments::where('md5', $md5)->find()) {
            $file_path = $file_exists['path'];
            return json([
                            'code' => 1, 'info' => '上传成功', 'class' => 'success', 'id' => $file_exists['id'],
                            'path' => $file_path
                        ]);
        } else {
            $this->error('文件不存在');
        }
    }

    /**
     * 删除附件
     * @param string $ids 附件id* @returnmixed
     */
    public function delete($ids = '')
    {
        $ids = request()->isPost() ? input('post.ids/a') : input('param.ids');
        if (empty($ids))
            $this->error('缺少主键');

        $files_path = Attachments::where('id', 'in', $ids)->column('path,thumb', 'id');

        foreach ($files_path as $value) {
            $real_path       = realpath(config('upload_path') . '/../' . $value['path']);
            $real_path_thumb = realpath(config('upload_path') . '/../' . $value['thumb']);

            if (is_file($real_path) && !unlink($real_path)) {
                $this->error('删除失败');
            }
            if (is_file($real_path_thumb) && !unlink($real_path_thumb)) {
                $this->error('删除缩略图失败');
            }
        }
        if (Attachments::where('id', 'in', $ids)->delete()) {
            // 记录行为
            /*$ids = is_array($ids) ? implode(',', $ids) : $ids;
            action_log('attachment_delete', 'admin_attachment', 0, UID, $ids);*/
            $this->success('删除成功');
        } else {
            $this->error('删除失败');
        }
    }
}