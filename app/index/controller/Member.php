<?php
/**
 * Created by PhpStorm.
 * User: HuWeiBing
 * Date: 2019/10/28
 * Time: 15:08
 */

namespace app\index\controller;


use app\model\Collects;
use app\model\Comments;
use app\model\Download_logs;
use app\model\PropertyExpLogs;
use app\model\Resources;
use app\model\SignLogs;
use app\model\Users;
use think\App;
use think\facade\Db;
use think\facade\View;

class Member extends Common
{
    public $user;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        if (!session('?user')) {
            $this->error('您还未登录，无权访问');
        }
        $active     = request()->action();
        $user_info  = session('user');
        $this->user = $user_info;
        $seo        = [
            'seo_title' => config('app.web_site_slogan') . '-' . config('app.web_site_title'),
            'keywords'  => config('app.web_site_keywords'), 'description' => config('app.web_site_description')
        ];
        View::assign($seo);
        View::assign('_active', $active);
        View::assign('user', $user_info);
    }

    public function index()
    {

        return View::fetch();
    }

    public function info()
    {
        $action = input('action/s') ?: 'index';
        if ($action == 'picture')
            $data['piclist'] = range(1, 120);

        $info = session('user');
        View::assign($info);

        $data['action'] = $action;
        View::assign($data);
        return View::fetch();
    }

    /**
     * 修改密码
     * @return array
     */
    public function updatePass()
    {
        $data     = $this->params();
        $validate = new \app\index\validate\User();
        if (!$validate->scene('updatePass')->check($data)) {
            return show(0, $validate->getError());
        }
        try {
            $time = time();
            $res  = Users::field('id,username,password,code,nickname,token')->find($data['id'])->toArray();
            $code = $res['code'];

            if (md5($code . $data['oldPassword']) != $res['password']) {
                return show(0, '原密码错误~');
            }
            $data['password']    = md5($code . $data['password']);
            $data['update_time'] = $time;
            unset($data['oldPassword']);
            Users::update($data);

        } catch (\Exception $e) {
            return show(0, '网络繁忙~');
        }
        return show(1, 'ok');
    }

    public function setPicture()
    {
        if (request()->isPost()) {
            $avatar_id = input('img/d');
            if (!$avatar_id) {
                return show(0, '参数错误');
            }

            $res = Users::where('id', session('user.id'))->update(['avatar' => $avatar_id]);

            if ($res) {
                return show(1, '设置成功', ['url' => '/static/images/picture/' . $avatar_id . '.jpg']);
            }

            return show(0, '网络繁忙');
        }
    }

    public function signin()
    {
        if (request()->isPost()) {
            $time     = strtotime(date('Y-m-d'));
            $sign_key = 'sign_' . $this->user['id'] . $time;
            if (cache($sign_key)) {
                return show(0, '今天您已签到');
            }
            Db::startTrans();
            try {
                $where  = [
                    ['user_id', '=', $this->user['id']], ['last_sign_time', '>=', $time]
                ];
                $days   = SignLogs::where($where)->count();
                $points = 20;
                $exp    = 20;
                $coin   = 0;
                $title  = '签到';

                if ($days == 20) {
                    $points += 200;
                    $exp    += 200;
                    $title  = '签到满20天';
                }

                $user_save = [
                    'points' => Db::raw('points+' . $points), 'coin' => Db::raw('coin+' . $coin),
                    'exp'    => Db::raw('exp+' . $exp),
                ];


                $property_exp_log = [
                    'user_id' => $this->user['id'], 'title' => $title, 'points' => $points, 'coin' => $coin,
                    'exp'     => $exp, 'state' => 1, 'create_time' => time()
                ];

                $sign_log = [
                    'user_id'        => $this->user['id'], 'points' => $points, 'coin' => $coin, 'exp' => $exp,
                    'last_sign_time' => $time
                ];
                PropertyExpLogs::insert($property_exp_log);
                Users::where('id', $this->user['id'])->update($user_save);
                SignLogs::insert($sign_log);

                session('user', Users::getBaseInfo(session('user.id')));
                $msg = '签到成功，奖励' . $points . '积分、' . $exp . '经验值';
                cache($sign_key, 1, ['expire' => get_today_over_time()]);
                Db::commit();
            } catch (\Exception $e) {
                Db::rollback();
                return show(0, '网络繁忙');
            }

            return show(1, $msg);
        }
        $a = date('y');
        $b = date('m');

        $start = mktime(0, 0, 0, $b, 1, $a); //获取当前的月的一号
        $year  = date("Y", $start); //当前的年
        $month = date("m", $start); //当前的月
        $week  = date("w", $start); // 每个月的一号是星期几
        $days  = date("t", $start); //每个月的总天数
        $day   = date("d"); //获取今天是几号
        $end   = mktime(0, 0, 0, $b, $days, $a);


        $where     = [
            ['user_id', '=', $this->user['id']], ['last_sign_time', '>=', $start]
        ];
        $sign_list = SignLogs::where($where)->column('total_days', 'last_sign_time');

        for ($i = 0; $i < $week; $i++) {
            $dayList[] = ['day' => '-'];
        }
        for ($d = 1; $d <= $days; $d++) {
            if ($sign_list && $sign_list[strtotime(date('Y-m-' . $d))]) {
                $dayList[] = ['day' => $d, 'sign' => 'yes'];
            } else {
                $dayList[] = ['day' => $d, 'sign' => 'no'];
            }

        }
        for ($i = date("w", $end); $i < 6; $i++) {
            $dayList[] = ['day' => '-'];
        }
        $data = [
            'days' => $dayList, 'year' => $year, 'month' => $month, 'day' => $day
        ];
        View::assign($data);
        return View::fetch();
    }

    public function order()
    {
        return View::fetch();
    }

    public function comment()
    {
        $list = Comments::alias('a')->field('a.*,b.title,b.channel,c.thumb')->leftJoin('resources b','a.res_id=b.id')->leftJoin('attachments c','b.thumb=c.id')->where('a.user_id', session('user.id'))->select();

        View::assign('list', $list);
        return View::fetch();
    }

    public function message()
    {
        return View::fetch();
    }

    public function favorite()
    {
        $list = Collects::where('user_id', session('user.id'))->select();

        View::assign('list', $list);
        return View::fetch();
    }

    public function download()
    {
        $list = Download_logs::alias('a')->field('a.*,b.thumb')->leftJoin('attachments b','a.thumb=b.id')->where('a.user_id', session('user.id'))->select();

        View::assign('list', $list);
        return View::fetch();
    }

    public function mysoft()
    {
        $list = Resources::where('user_id', session('user.id'))->select();

        View::assign('list', $list);
        return View::fetch();
    }

    public function uploader()
    {
        $action = input('action/s') ?: 'jquery';
        if (!in_array($action, ['jquery', 'source', 'templates'])) {
            $this->error('您访问的页面不存在！');
        }
        if (request()->isAjax()) {
            $data = input('post.');

            $data['channel']  = $action;
            $data['keywords'] = $data['tags'] . ',' . getChannelName($action);
            $data['channel']  = $action;
            $data['user_id']  = session('user.id');
            if ($action == 'source') {
                $data['state'] = 0;
            }
            $validate = new \app\index\validate\Resource();
            if (!$validate->scene($action)->check($data)) {
                return show(0, $validate->getError());
            }
            $time                = time();
            $data['update_time'] = $time;
            try {
                if ($data['id']) {
                    Resources::update($data);
                } else {
                    $data['create_time'] = $time;
                    Resources::insert($data);
                }

            } catch (\Exception $e) {
                return show(0, $e->getMessage(), $data);
                return show(0, '操作失败~', $data);
            }
            return show(1, '操作成功~', $data);

        }
        $sourceAttr         = getSourceAttr($action);
        $data['action']     = $action;
        $data['sourceAttr'] = $sourceAttr;
        View::assign($data);
        return View::fetch();
    }
}