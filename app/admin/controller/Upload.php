<?php
/**
 * Created by PhpStorm.
 * User: HuWeiBing
 * Date: 2019/10/26
 * Time: 23:21
 */

namespace app\admin\controller;


use app\BaseController;
use app\model\Attachments;
use util\Uploader;
use think\Image;

class Upload extends BaseController
{

    public $config;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->config = json_decode(preg_replace("/\/\*[\s\S]+?\*\//", "", file_get_contents("./plugins/ueditor/php/config.json")), true);
        //$this->config['fileAllowFiles'] = config('app.upload_file_ext');
        //$this->config['imageAllowFiles'] = config('app.upload_image_ext');
    }

    /**
     * 上传附件
     * @param string $dir 保存的目录:images,files,videos,voices
     * @param string $from 来源，wangeditor：wangEditor编辑器, ueditor:ueditor编辑器, editormd:editormd编辑器等
     * @param string $module 来自哪个模块* @returnmixed
     */
    public function index($type = '', $from = '', $dir = '')
    {
        // 临时取消执行时间限制
        set_time_limit(0);
        if ($type == '')
            $this->error('没有指定上传目录');
        if ($from == 'ueditor')
            return $this->ueditor();
        if ($from == 'jcrop')
            return $this->jcrop();
        return $this->upload($type,$from);
    }

    /**
     * 处理Jcrop图片裁剪
     */
    private function jcrop()
    {
        $file_path = request()->post('path', '');
        $cut_info  = request()->post('cut', '');
        $thumb     = request()->post('thumb', '');
        $watermark = request()->post('watermark', '');
        $module    = request()->param('module', '');

        // 上传图片
        if ($file_path == '') {
            $file = request()->file('file');
            if (!is_dir(config('upload_temp_path'))) {
                mkdir(config('upload_temp_path'), 0766, true);
            }
            $info = $file->move(config('upload_temp_path'), $file->hash('md5'));
            if ($info) {
                return json(['code' => 1, 'src' => PUBLIC_PATH . 'uploads/temp/' . $info->getFilename()]);
            } else {
                $this->error('上传失败');
            }
        }

        $file_path = config('upload_temp_path') . str_replace(PUBLIC_PATH . 'uploads/temp/', '', $file_path);

        if (is_file($file_path)) {
            // 获取裁剪信息
            $cut_info = explode(',', $cut_info);

            // 读取图片
            $image = Image::open($file_path);

            $dir_name = date('Ymd');
            $file_dir = config('upload_path') . DS . 'images/' . $dir_name . '/';
            if (!is_dir($file_dir)) {
                mkdir($file_dir, 0766, true);
            }
            $file_name     = md5(microtime(true)) . '.' . $image->type();
            $new_file_path = $file_dir . $file_name;

            // 裁剪图片
            $image->crop($cut_info[0], $cut_info[1], $cut_info[2], $cut_info[3], $cut_info[4], $cut_info[5])
                ->save($new_file_path);

            // 水印功能
            if ($watermark == '') {
                if (config('upload_thumb_water') == 1 && config('upload_thumb_water_pic') > 0) {
                    $this->create_water($new_file_path, config('upload_thumb_water_pic'));
                }
            } else {
                if (strtolower($watermark) != 'close') {
                    list($watermark_img, $watermark_pos, $watermark_alpha) = explode('|', $watermark);
                    $this->create_water($new_file_path, $watermark_img, $watermark_pos, $watermark_alpha);
                }
            }

            // 是否创建缩略图
            $thumb_path_name = '';
            if ($thumb == '') {
                if (config('upload_image_thumb') != '') {
                    $thumb_path_name = $this->create_thumb($new_file_path, $dir_name, $file_name);
                }
            } else {
                if (strtolower($thumb) != 'close') {
                    list($thumb_size, $thumb_type) = explode('|', $thumb);
                    $thumb_path_name = $this->create_thumb($new_file_path, $dir_name, $file_name, $thumb_size, $thumb_type);
                }
            }

            // 保存图片
            $file      = new File($new_file_path);
            $file_info = [
                'uid'    => session('user_auth.uid'), 'name' => $file_name, 'mime' => $image->mime(),
                'path'   => 'uploads/images/' . $dir_name . '/' . $file_name, 'ext' => $image->type(),
                'size'   => $file->getSize(), 'md5' => $file->hash('md5'), 'sha1' => $file->hash('sha1'),
                'thumb'  => $thumb_path_name, 'module' => $module, 'width' => $image->width(),
                'height' => $image->height()
            ];

            if ($file_add = Attachments::create($file_info)) {
                // 删除临时图片
                unlink($file_path);
                // 返回成功信息
                return json([
                                'code'  => 1, 'id' => $file_add['id'], 'src' => PUBLIC_PATH . $file_info['path'],
                                'thumb' => $thumb_path_name == '' ? '' : PUBLIC_PATH . $thumb_path_name,
                            ]);
            } else {
                $this->error('上传失败');
            }
        }
        $this->error('文件不存在');
    }

    /**
     * 创建缩略图
     * @param string $file 目标文件，可以是文件对象或文件路径
     * @param string $dir 保存目录，即目标文件所在的目录名
     * @param string $save_name 缩略图名
     * @param string $thumb_size 尺寸
     * @param string $thumb_type 裁剪类型* @returnstring 缩略图路径
     */
    private function create_thumb($file = '', $dir = '', $save_name = '', $thumb_size = '', $thumb_type = '')
    {
        // 获取要生成的缩略图最大宽度和高度
        $thumb_size = $thumb_size == '' ? config('upload_image_thumb') : $thumb_size;
        list($thumb_max_width, $thumb_max_height) = explode(',', $thumb_size);
        // 读取图片
        $image = Image::open($file);
        // 生成缩略图
        $thumb_type = $thumb_type == '' ? config('upload_image_thumb_type') : $thumb_type;
        $image->thumb($thumb_max_width, $thumb_max_height, $thumb_type);
        // 保存缩略图
        $thumb_path = config('upload_path') . '/images/' . $dir . '/thumb/';
        if (!is_dir($thumb_path)) {
            mkdir($thumb_path, 0766, true);
        }
        $thumb_path_name = $thumb_path . $save_name;
        $image->save($thumb_path_name);
        $thumb_path_name = 'uploads/images/' . $dir . '/thumb/' . $save_name;
        return $thumb_path_name;
    }

    /**
     * 添加水印
     * @param string $file 要添加水印的文件路径
     * @param string $watermark_img 水印图片id
     * @param string $watermark_pos 水印位置
     * @param string $watermark_alpha 水印透明度
     */
    private function create_water($file = '', $watermark_img = '', $watermark_pos = '', $watermark_alpha = '')
    {
        $path            = Attachments::getFilePath($watermark_img, 1);
        $thumb_water_pic = realpath(ROOT_PATH . 'public/' . $path);
        if (is_file($thumb_water_pic)) {
            // 读取图片
            $image = Image::open($file);
            // 添加水印
            $watermark_pos   = $watermark_pos == '' ? config('upload_thumb_water_position') : $watermark_pos;
            $watermark_alpha = $watermark_alpha == '' ? config('upload_thumb_water_alpha') : $watermark_alpha;
            $image->water($thumb_water_pic, $watermark_pos, $watermark_alpha);
            // 保存水印图片，覆盖原图
            $image->save($file);
        }
    }

    public function ueditor(){
        $action = $_GET['action'];
        switch ($action) {
            case 'config':
                $result =  json($this->config);
                break;

            /* 上传图片 */
            case 'uploadimage':
                /* 上传涂鸦 */
            case 'uploadscrawl':
                /* 上传视频 */
            case 'uploadvideo':
                /* 上传文件 */
            case 'uploadfile':
                $result = $this->upload();
                break;

            /* 列出图片 */
            case 'listimage':
                $result = $this->getList();
                break;
            /* 列出文件 */
            case 'listfile':
                $result = $this->getList();
                break;

            /* 抓取远程文件 */
            case 'catchimage':
                $result = $this->scrawl();
                break;

            default:
                $result = json(array('state'=> '请求地址出错'));
                break;
        }

        /* 输出结果 */
        if (isset($_GET["callback"])) {
            if (preg_match("/^[\w_]+$/", $_GET["callback"])) {
                echo htmlspecialchars($_GET["callback"]) . '(' . $result . ')';
            } else {
                return json(array('state'=> 'callback参数不合法'));
            }
        } else {
            return $result;
        }
    }

    /**
     * 上传附件和上传视频
     * Date: 14-04-09
     * Time: 上午10:17
     */
    public function upload($type,$from){
        $CONFIG = $this->config;
        /* 上传配置 */
        $base64 = "upload";
        switch (htmlspecialchars($_GET['action'])) {
            case 'uploadimage':
                $config = array(
                    "pathFormat" => $CONFIG['imagePathFormat'],
                    "maxSize" => $CONFIG['imageMaxSize'],
                    "allowFiles" => $CONFIG['imageAllowFiles']
                );
                $fieldName = $CONFIG['imageFieldName'];
                break;
            case 'uploadscrawl':
                $config = array(
                    "pathFormat" => $CONFIG['scrawlPathFormat'],
                    "maxSize" => $CONFIG['scrawlMaxSize'],
                    "allowFiles" => $CONFIG['scrawlAllowFiles'],
                    "oriName" => "scrawl.png"
                );
                $fieldName = $CONFIG['scrawlFieldName'];
                $base64 = "base64";
                break;
            case 'uploadvideo':
                $config = array(
                    "pathFormat" => $CONFIG['videoPathFormat'],
                    "maxSize" => $CONFIG['videoMaxSize'],
                    "allowFiles" => $CONFIG['videoAllowFiles']
                );
                $fieldName = $CONFIG['videoFieldName'];
                break;
            case 'uploadfile':
            default:
                $config = array(
                    "pathFormat" => $CONFIG['filePathFormat'],
                    "maxSize" => $CONFIG['fileMaxSize'],
                    "allowFiles" => $CONFIG['fileAllowFiles']
                );
                $fieldName = $CONFIG['fileFieldName'];
                break;
        }

        /* 生成上传实例对象并完成上传 */
        $up = new Uploader($fieldName, $config, $base64);

        /**
         * 得到上传文件所对应的各个参数,数组结构
         * array(
         *     "state" => "",          //上传状态，上传成功时必须返回"SUCCESS"
         *     "url" => "",            //返回的地址
         *     "title" => "",          //新文件名
         *     "original" => "",       //原始文件名
         *     "type" => ""            //文件类型
         *     "size" => "",           //文件大小
         * )
         */

        // 写入数据库
        //if ($file_add = Attachments::create($file_info)) {
            //$file_path = PUBLIC_PATH . $file_info['path'];
            switch ($from) {
                case 'ueditor':
                    return json($up->getFileInfo());
                    break;
                default:
                    return json([
                                    'code' => 1, 'info' => '上传成功', 'class' => 'success',
                                    'path' => $up->getFileInfo()['url']
                                ]);
            }
        /*} else {
            switch ($from) {
                case 'ueditor':
                    return json(['state' => '上传失败']);
                    break;
                default:
                    return json(['code' => 0, 'class' => 'danger', 'info' => '上传失败']);
            }
        }*/
        /* 返回数据 */
        return json($up->getFileInfo());
    }

    /**
     * 抓取远程图片
     * User: Jinqn
     * Date: 14-04-14
     * Time: 下午19:18
     */
    public function scrawl(){
        $CONFIG = $this->config;

        /* 上传配置 */
        $config = array(
            "pathFormat" => $CONFIG['catcherPathFormat'],
            "maxSize" => $CONFIG['catcherMaxSize'],
            "allowFiles" => $CONFIG['catcherAllowFiles'],
            "oriName" => "remote.png"
        );
        $fieldName = $CONFIG['catcherFieldName'];

        /* 抓取远程图片 */
        $list = array();
        if (isset($_POST[$fieldName])) {
            $source = $_POST[$fieldName];
        } else {
            $source = $_GET[$fieldName];
        }
        foreach ($source as $imgUrl) {
            $item = new Uploader($imgUrl, $config, "remote");
            $info = $item->getFileInfo();
            array_push($list, array(
                "state" => $info["state"],
                "url" => $info["url"],
                "size" => $info["size"],
                "title" => htmlspecialchars($info["title"]),
                "original" => htmlspecialchars($info["original"]),
                "source" => htmlspecialchars($imgUrl)
            ));
        }

        /* 返回抓取数据 */
        return json_encode(array(
                               'state'=> count($list) ? 'SUCCESS':'ERROR',
                               'list'=> $list
                           ));
    }


    /**
     * 获取已上传的文件列表
     * User: Jinqn
     * Date: 14-04-09
     * Time: 上午10:17
     */

    public function getList(){
        $CONFIG = $this->config;
        /* 判断类型 */
        switch ($_GET['action']) {
            /* 列出文件 */
            case 'listfile':
                $allowFiles = $CONFIG['fileManagerAllowFiles'];
                $listSize = $CONFIG['fileManagerListSize'];
                $path = $CONFIG['fileManagerListPath'];
                break;
            /* 列出图片 */
            case 'listimage':
            default:
                $allowFiles = $CONFIG['imageManagerAllowFiles'];
                $listSize = $CONFIG['imageManagerListSize'];
                $path = $CONFIG['imageManagerListPath'];
        }
        $allowFiles = substr(str_replace(".", "|", join("", $allowFiles)), 1);

        /* 获取参数 */
        $size = isset($_GET['size']) ? htmlspecialchars($_GET['size']) : $listSize;
        $start = isset($_GET['start']) ? htmlspecialchars($_GET['start']) : 0;
        $end = $start + $size;

        /* 获取文件列表 */
        $path = $_SERVER['DOCUMENT_ROOT'] . (substr($path, 0, 1) == "/" ? "":"/") . $path;
        $files = getfiles($path, $allowFiles);
        if (!count($files)) {
            return json_encode(array(
                                   "state" => "no match file",
                                   "list" => array(),
                                   "start" => $start,
                                   "total" => count($files)
                               ));
        }

        /* 获取指定范围的列表 */
        $len = count($files);
        for ($i = min($end, $len) - 1, $list = array(); $i < $len && $i >= 0 && $i >= $start; $i--){
            $list[] = $files[$i];
        }
        //倒序
        //for ($i = $end, $list = array(); $i < $len && $i < $end; $i++){
        //    $list[] = $files[$i];
        //}

        /* 返回数据 */
        $result = json_encode(array(
                                  "state" => "SUCCESS",
                                  "list" => $list,
                                  "start" => $start,
                                  "total" => count($files)
                              ));

        return $result;
    }


    /**
     * 检查附件是否存在
     * @param string $md5 文件md5* @return\think\response\Json
     */
    public function check($md5 = '')
    {
        $md5 == '' && $this->error('参数错误');

        // 判断附件是否已存在
        if ($file_exists = Attachments::where('md5', $md5)->find()) {
            if ($file_exists['driver'] == 'local') {
                $file_path = PUBLIC_PATH . $file_exists['path'];
            } else {
                $file_path = $file_exists['path'];
            }
            return json([
                            'code' => 1, 'info' => '上传成功', 'class' => 'success', 'id' => $file_exists['id'],
                            'path' => $file_path
                        ]);
        } else {
            $this->error('文件不存在');
        }
    }

    /**
     * 删除附件
     * @param string $ids 附件id* @returnmixed
     */
    public function delete($ids = '')
    {
        $ids = request()->isPost() ? input('post.ids/a') : input('param.ids');
        if (empty($ids))
            $this->error('缺少主键');

        $files_path = Attachments::where('id', 'in', $ids)->column('path,thumb', 'id');

        foreach ($files_path as $value) {
            $real_path       = realpath(config('upload_path') . '/../' . $value['path']);
            $real_path_thumb = realpath(config('upload_path') . '/../' . $value['thumb']);

            if (is_file($real_path) && !unlink($real_path)) {
                $this->error('删除失败');
            }
            if (is_file($real_path_thumb) && !unlink($real_path_thumb)) {
                $this->error('删除缩略图失败');
            }
        }
        if (Attachments::where('id', 'in', $ids)->delete()) {
            // 记录行为
            /*$ids = is_array($ids) ? implode(',', $ids) : $ids;
            action_log('attachment_delete', 'admin_attachment', 0, UID, $ids);*/
            $this->success('删除成功');
        } else {
            $this->error('删除失败');
        }
    }
}