<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/2/20
 * Time: 21:44
 */

namespace app\admin\controller;

use app\model\Categorys;
use app\model\Resources;
use think\facade\Db;
use think\facade\View;

class Resource extends Base
{
    public $tags   = [];
    public $actors = [];

    function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $category = Categorys::where('parent_id', 0)->select();
        $_channel = [
            'jquery'=>'网页特效',
            'source'=>'整站源码',
            'templates'=>'网站模板',
            'plugins'=>'功能插件',
        ];
        View::assign('category', $category);
    }

    //文章列表页
    public function index()
    {
        $where   = $this->getMap();
        $list    = Resources::alias('a')->field('a.id,title,channel,description,clicks,downs,state,tags,a.status,a.create_time,b.thumb')->leftJoin('attachments b', 'a.thumb=b.id')
            ->where($where)->order('a.status, a.create_time desc, a.id desc')
            ->paginate(20, false, ['query' => input('get.')]);

        View::assign('list', $list);
        return View::fetch();
    }

    public function createDemo()
    {
        try {
            $id = input('id/d');
            $data = Resources::alias('a')->field('a.id,b.path,b.ext')->leftJoin('attachments b', 'a.file_id=b.id')->find($id)
                ->toArray();
            if($data['ext'] == '.zip'){
                $zip  = new \ZipArchive;//新建一个ZipArchive的对象
                /*
                通过ZipArchive的对象处理zip文件
                $zip->open这个方法的参数表示处理的zip文件名。
                如果对zip文件对象操作成功，$zip->open这个方法会返回TRUE
                */
                if ($zip->open('.' . $data['path']) === TRUE) {
                    $zip->extractTo('./demo/' . $data['id']);//假设解压缩到在当前路径下images文件夹的子文件夹php
                    $zip->close();//关闭处理的zip文件
                }
            }else{

                $rar_file = rar_open('.' . $data['path']) or die("Failed to open Rar archive");
                $entries = rar_list($rar_file);
                foreach ($entries as $entry) {
                    //dir/extract/to/换成其他路径即可
                    $entry->extract('./demo/' . $data['id']);
                }
                rar_close($rar_file);
            }


            //判断项目是否在一级目录，如果不是就移动到一级目录
            $list = scandir('./demo/' . $data['id']);
            if (count($list) == 3) {
                //dump($list[2]);
                $res = moveFolder('./demo/' . $data['id'] . '/' . $list[2] . '/', './demo/' . $data['id'] . '/');
                if ($res) {
                    delFolder('./demo/' . $data['id'] . '/' . $list[2]);
                }
            }

            Resources::update(['state'=>1,'id'=>$id]);

        } catch (\Exception $e) {
            print_r($e->getMessage());
            $this->error('网络繁忙');
        }
        $this->success('操作成功');
    }

    //导入操作
    public function flag()
    {
        $ids  = input('post.');
        $flag = input('value/d');
        Db::table('videos')->where('id', 'in', $ids['ids'])->setField(['flag' => $flag]);
        $this->success('操作成功');
    }

    //添加文章
    public function create()
    {
        if ((!request()->isPost())) {
            $this->info_save();
        }
        $token = request()->buildToken('__token__', 'sha1');
        View::assign('token', $token);
        View::assign('file', date('Ymd') . '/' . $token);
        return View::fetch('info');
    }

    //资讯修改、添加操作
    function info_save()
    {
        $data = input('post.');
        $id   = $data['id'];

        if (!$data['cat_id']) {
            $this->error('请选择分类~');
        }
        if (!$data['title']) {
            $this->error('标题不能为空~');
        }
        if (!$data['thumb']) {
            $this->error('请上传封面图~');
        }
        if (!$data['tags']) {
            $this->error('请选择标签~');
        }
        if (!$data['actors'] && $data['cat_id'] == 1) {
            $this->error('请选择演员~');
        }

        if ($data['cat_id '] == 3 || $data['cat_id'] == 4) {
            if (!$data['images']) {
                $this->error('请上传图片内容~');
            }
        }
        $keywords = '';
        try {
            foreach ($data['tags'] as $tid) {
                foreach ($this->tags as $k => $v) {
                    if ($v['id'] == $tid) {
                        $keywords .= $v['name'] . ',';
                    }
                }
            }

            if ($data['cat_id']) {
                $channel         = Categorys::where('id', $data['cat_id'])->value('alias');
                $data['channel'] = $channel;
            }
            $data['update_time'] = time();
            $data['keywords']    = rtrim($keywords, ',') . ',' . $data['title'];
            $data['status']      = $data['status'] && $data['status'] <> '0' ? $data['status'] : 0;
            $data['tags']        = implode(',', $data['tags']);
            $data['actors']      = implode(',', $data['actors']);

            if ($id) {
                Resources::update($data);
            } else {
                $data['clicks']      = mt_rand(300, 500);
                $data['goods']       = mt_rand(11, 99);
                $data['score']       = rand(7, 9) . '.' . rand(0, 9);
                $data['create_time'] = time();
                $where[]             = ['title', '=', $data['title']];
                $res                 = Resources::where($where)->find();
                $res && $this->error('此视频以添加过');
                Resources::insertGetId($data);
            }
        } catch (\Exception $e) {
            $this->error($e->getMessage());
        }

        $this->success('操作成功');

    }

    //编辑文章
    public function edit()
    {
        if (request()->isPost()) {
            $this->info_save();
        }
        $info           = Db::table('resources')->find(input('id'));
        $info['tags']   = explode(',', $info['tags']);
        View::assign($info);
        return View::fetch('info');
    }
}